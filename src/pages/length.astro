---
import clsx from "clsx";
import ForwardArrow from "../assets/arrow.svg?raw";
import DynamicLayout from "../layouts/DynamicLayout.astro";

const items = Array.from({ length: 35 }, (_, index) => index);

const gridConfigs = {
  default: { className: "grid-spacer" },
  special: [
    { index: 25, className: "grid-spacer-alt item-25" },
    {
      index: 26,
      className: "grid-spacer-alt item-26",
      href: "/",
    },
    { index: 27, className: "grid-spacer-alt radial item-27" },
    { index: 28, className: "grid-spacer-alt radial item-28" },
    { index: 29, className: "grid-spacer-alt item-29" },
    { index: 30, className: "grid-spacer-alt radial item-30" },
    { index: 31, className: "grid-spacer-alt item-31", href: "/" },
    { index: 32, className: "grid-spacer-alt item-32" },
    { index: 33, className: "grid-spacer-alt item-33" },
    { index: 34, className: "grid-spacer-alt radial item-34" },
  ],
  hidden: { from: 16, to: 25, className: "grid-spacer hidden" },
};
---

<DynamicLayout title="dynamic">
  <div class="root">
    <div class="container-inner">
      <aside class="fade-x"></aside>
      <aside class="fade-y"></aside>
      <ul class="grid-box">
        {
          items.map((_, index) => {
            if (
              index >= gridConfigs.hidden.from &&
              index < gridConfigs.hidden.to
            ) {
              return <li class={gridConfigs.hidden.className} />;
            }

            const specialConfig = gridConfigs.special.find(
              (config) => config.index === index
            );

            if (specialConfig) {
              const classNames = clsx(specialConfig.className, {
                "link-hover": specialConfig.href,
              });

              if (specialConfig.href) {
                return (
                  <a
                    href={specialConfig.href}
                    target="_blank"
                    class={classNames}
                  >
                    {index === 26 && (
                      <>
                        <p class="text-sm">
                          Continue to the next section to learn about
                          customizing your theme with a custom font.
                        </p>
                        <span class="text-sm white">
                          Read the docs
                          <Fragment set:html={ForwardArrow} />
                        </span>
                      </>
                    )}

                    {index === 31 && <h1 class="text-lg">Repeat Station</h1>}
                  </a>
                );
              }
              return (
                <li class={classNames}>
                  {index === 25 && <h1 class="text-lg">Repeat Station</h1>}
                </li>
              );
            }

            return <li class={gridConfigs.default.className} />;
          })
        }
      </ul>
    </div>
  </div>
</DynamicLayout>

<style>
  :root {
    --column-count: 1;
    --spacing-3: 24px;
    --spacing-4: 32px;
    --grey-300: #6a6b6c;
    --grey-500: #2f3031;
    --grey-600: #1b1c1e;
    --grey-800: #0c0d0f;
    --grey-900: #07080a;
    --grid-width: min(calc(100vw - 30px * 2), 1065px);
    --display: flex;

    /* Special grid area variables */
    --grid-lg-area-25: 3 / 2;
    --grid-md-area-25: 4 / 2;
    --grid-area-25: 4 / 2;

    --grid-lg-area-26: 4 / 2;
    --grid-md-area-26: 4 / 3;
    --grid-area-26: 5 / 2;

    --grid-lg-area-27: 3 / 3 / span 2 / span 2;
    --grid-md-area-27: 3 / 2 / span 1 / span 2;
    --grid-area-27: 3 / 2;

    --grid-lg-area-28: 6 / 2 / span 1 / span 2;
    --grid-md-area-28: 6 / 2;
    --grid-area-28: 7 / 2;

    --grid-lg-area-29: 6 / 4;
    --grid-md-area-29: 6 / 3;
    --grid-area-29: 8 / 2;

    --grid-lg-area-30: 7 / 2;
    --display-lg-30: flex;

    --grid-lg-area-31: 7 / 3;
    --grid-md-area-31: 7 / 2;
    --grid-area-31: 10 / 2;

    --grid-lg-area-32: 7 / 4;
    --grid-md-area-32: 7 / 4;
    --grid-area-32: 9 / 2;

    --grid-lg-area-33: 9 / 2;
    --grid-md-area-33: 9 / 2;
    --display-md-33: flex;

    --grid-lg-area-34: 9 / 3 / span 1 / span 2;
    --grid-md-area-34: 9 / 3;
    --display-md-34: flex;
  }

  .root {
    min-height: calc(100vh - var(--header-height));
  }

  .fade-x {
    &::before {
      right: auto;
      left: 0;
      top: 0;
      bottom: 0;
      --direction: to right;
      width: calc(calc(100vw - var(--grid-width)) / 2);
      pointer-events: none;
      position: absolute;
      content: "";
      background: linear-gradient(
        var(--direction),
        var(--grey-900) 0,
        transparent 100%
      );
    }

    &::after {
      left: auto;
      right: 0;
      top: 0;
      bottom: 0;
      --direction: to left;
      width: calc(calc(100vw - var(--grid-width)) / 2);
      pointer-events: none;
      position: absolute;
      content: "";
      background: linear-gradient(
        var(--direction),
        var(--grey-900) 0,
        transparent 100%
      );
    }
  }

  .fade-y {
    &::before {
      bottom: auto;
      height: 146px;
      --direction: to bottom;
      pointer-events: none;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      content: "";
      background: linear-gradient(
        var(--direction),
        var(--grey-900) 0,
        transparent 100%
      );
    }

    &::after {
      top: auto;
      height: 209px;
      --direction: to top;
      pointer-events: none;
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      content: "";
      background: linear-gradient(
        var(--direction),
        var(--grey-900) 0,
        transparent 100%
      );
    }
  }

  .container-inner {
    position: relative;
    max-width: 100%;
    overflow: hidden;
  }

  .grid-box {
    display: grid;
    grid-template-columns:
      1fr repeat(
        var(--column-count),
        calc(var(--grid-width) / var(--column-count))
      )
      1fr;
    gap: 1px;
    counter-reset: fig;

    @media (min-width: 784px) {
      --column-count: 2;
    }

    @media (min-width: 1200px) {
      --column-count: 3;
    }
  }

  .grid-box > * {
    box-shadow:
      0 0 0 1px var(--grey-600),
      inset 0 0 0 1px var(--grey-900);
  }

  .grid-spacer,
  .grid-spacer-alt {
    min-height: 48px;
    display: var(--display, flex);
    grid-area: var(--grid-area, auto);

    @media (min-width: 784px) {
      display: var(--display-md, var(--display, flex));
      grid-area: var(--grid-md-area, auto);
    }

    @media (min-width: 1200px) {
      display: var(--display-lg, var(--display-md, var(--display, flex)));
      grid-area: var(--grid-lg-area, var(--grid-md-area, auto));
    }
  }

  .grid-spacer:first-child {
    height: 146px;
  }

  .text-lg {
    --fs-lg: 60px;
    --ls-lg: -0.025em;
    --lh-lg: 60px;

    margin-bottom: 0;
    font-size: var(--fs-lg);
    letter-spacing: var(--ls-lg);
    line-height: var(--lh-lg);
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      "Helvetica Neue",
      sans-serif !important;
    -webkit-font-smoothing: antialiased;
    font-weight: 500;
    text-rendering: optimizeLegibility;
  }

  .text-sm {
    font-family: "IBM Plex Mono", monospace;
    font-size: 14px;
    font-style: normal;
    font-weight: 500;
    letter-spacing: 0.3px;
    line-height: 160%;
    color: var(--Text-Muted, var(--grey-300));
    text-rendering: optimizeLegibility;
  }

  .grid-spacer-alt {
    flex-direction: column;
    gap: var(--spacing-4);
    justify-content: space-between;
    min-height: 300px;
    padding: var(--spacing-3);

    @media (min-width: 784px) {
      min-height: 355px;
    }
  }

  .radial {
    position: relative;
    align-items: center;
    justify-content: center;
    padding: 50px;
    background-image: radial-gradient(var(--grey-500) 0.5px, transparent 0);
    background-repeat: repeat;
    background-position: -8.5px -8.5px;
    background-size: 17px 17px;
  }

  .link-hover {
    width: 100%;
    height: 100%;
    transition: background-color 0.15s;

    &:hover {
      background-color: var(--grey-800);
    }
  }

  .text-sm.white {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .white {
    color: var(--white);
  }

  /* Special item styles */
  .item-25 {
    --grid-lg-area: var(--grid-lg-area-25);
    --grid-md-area: var(--grid-md-area-25);
    --grid-area: var(--grid-area-25);
    min-height: auto;
  }

  .item-26 {
    --grid-lg-area: var(--grid-lg-area-26);
    --grid-md-area: var(--grid-md-area-26);
    --grid-area: var(--grid-area-26);
    min-height: auto;
  }

  .item-27 {
    --grid-lg-area: var(--grid-lg-area-27);
    --grid-md-area: var(--grid-md-area-27);
    --grid-area: var(--grid-area-27);
  }

  .item-28 {
    --grid-lg-area: var(--grid-lg-area-28);
    --grid-md-area: var(--grid-md-area-28);
    --grid-area: var(--grid-area-28);
  }

  .item-29 {
    --grid-lg-area: var(--grid-lg-area-29);
    --grid-md-area: var(--grid-md-area-29);
    --grid-area: var(--grid-area-29);
  }

  .item-30 {
    --grid-lg-area: var(--grid-lg-area-30);
    --display: none;
    --display-lg: var(--display-lg-30);
  }

  .item-31 {
    --grid-lg-area: var(--grid-lg-area-31);
    --grid-md-area: var(--grid-md-area-31);
    --grid-area: var(--grid-area-31);
    min-height: 300px;
  }

  .item-32 {
    --grid-lg-area: var(--grid-lg-area-32);
    --grid-md-area: var(--grid-md-area-32);
    --grid-area: var(--grid-area-32);
  }

  .item-33 {
    --grid-lg-area: var(--grid-lg-area-33);
    --grid-md-area: var(--grid-md-area-33);
    --grid-area: var(--grid-area-33);
    --display: none;
    --display-md: var(--display-md-33);
  }

  .item-34 {
    --grid-lg-area: var(--grid-lg-area-34);
    --grid-md-area: var(--grid-md-area-34);
    --grid-area: var(--grid-area-34);
    --display: none;
    --display-md: var(--display-md-34);
  }
</style>
